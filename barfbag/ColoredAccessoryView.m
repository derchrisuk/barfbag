////  ColoredAccessory.m////  Created by Karl Bode on 24.09.12.//  Copyright (c) 2012 Karl Bode. All rights reserved.//#import "ColoredAccessoryView.h"@implementation ColoredAccessoryView@synthesize accessoryType;@synthesize accessoryColor;- (void) dealloc {    self.accessoryColor = nil;    [super dealloc];}+ (ColoredAccessoryView *)disclosureIndicatorView {    ColoredAccessoryView *freshView = [[[ColoredAccessoryView alloc] initWithAccessoryType:ColoredAccessoryTypeDisclosureIndicator] autorelease];    return freshView;}+ (ColoredAccessoryView *)disclosureIndicatorViewWithColor:(UIColor*)color {    ColoredAccessoryView *freshView = [ColoredAccessoryView disclosureIndicatorView];    freshView.accessoryColor = color;    return freshView;}+ (ColoredAccessoryView*) checkmarkView {    ColoredAccessoryView *freshView = [[[ColoredAccessoryView alloc] initWithAccessoryType:ColoredAccessoryTypeCheckmark] autorelease];    return freshView;}+ (ColoredAccessoryView*) checkmarkViewWithColor:(UIColor*)color {    ColoredAccessoryView *freshView = [ColoredAccessoryView checkmarkView];    freshView.accessoryColor = color;    return freshView;}- (id)initWithAccessoryType:(ColoredAccessoryType)_accessoryType {    if( self = [super initWithFrame:CGRectMake(0.f, 0.f, 15.f, 15.f)] ) {        self.accessoryColor = [UIColor redColor];        self.accessoryType = _accessoryType;        self.backgroundColor = [UIColor clearColor];    }    return self;}- (id)initWithFrame:(CGRect)frame {    self = [super initWithFrame:frame];    if (self) {        // Initialization code        self.accessoryColor = [UIColor redColor];        self.backgroundColor = [UIColor clearColor];    }    return self;}- (void)drawRect:(CGRect)rect {    // Drawing code        CGContextRef ctx = UIGraphicsGetCurrentContext();        switch( accessoryType ) {                    case ColoredAccessoryTypeDisclosureIndicator:            [self drawDisclosureIndicatorInRect:rect toContext:ctx];            break;                    case ColoredAccessoryTypeCheckmark:            [self drawCheckmarkInRect:rect toContext:ctx];                    default:            break;    }    }- (void)drawDisclosureIndicatorInRect:(CGRect)rect toContext:(CGContextRef)ctx {    [accessoryColor setStroke];    UIBezierPath *accessoryPath = [UIBezierPath bezierPath];    [accessoryPath moveToPoint:CGPointMake(7., 2.)];    [accessoryPath addLineToPoint:CGPointMake(12.f, 7.5f)];    [accessoryPath addLineToPoint:CGPointMake(7.f, 13.f)];    [accessoryPath setLineWidth:2.5f];    [accessoryPath stroke];}- (void)drawCheckmarkInRect:(CGRect)rect toContext:(CGContextRef)ctx {    [accessoryColor setStroke];    UIBezierPath *accessoryPath = [UIBezierPath bezierPath];    [accessoryPath moveToPoint:CGPointMake(4.5f, 7.5f)];    [accessoryPath addLineToPoint:CGPointMake(8.f, 12.f)];    [accessoryPath addLineToPoint:CGPointMake(14.5f, 1.f)];    [accessoryPath setLineWidth:2.f];    [accessoryPath setLineCapStyle:kCGLineCapRound];    [accessoryPath stroke];}@end